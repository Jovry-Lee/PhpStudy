### 前言
PHP面向对象编程中常见的设计模式-单例模式.

### 简介
单例模式是创建对象模式中的一种，它确保某一个类只有一个实例，自行实例化并向整个系统全局地提供这个实例（类似与 global）。当有任务需要该实例时，它不会创建实例副本，而是会返回单例类内部存储实例的一个引用。

### 应用场景
- 数据库连接
单例模式主要在于数据库连接中。一个项目中会存在大量的数据库操作，比如过数据库句柄来连接数据库这一行为。使用单例模式可以避免大量的 new 操作，因为每一次 new 操作都会消耗内存资源和系统资源，还可以减少数据库连接这样就不容易出现 too many connections 情况；

- 配置类
项目中有一个类来全局控制某些配置信息。如果这个类能被实例化多次，可能在运行中对配置进行了修改，我们无法知道是在哪个实例中进行了修改。使用单例模式，所有对于配置文件的操作都是基于这个实例的；

### 单例模式的基本实现.
* 注意项:
    1. 需要一个静态的成员变量保存类的唯一实例.
    2. 构造函数和克隆函数必须声明为private,防止外部程序new 类从而失去单例模式的意义.
    3. 必须提供一个访问这个实例的公共静态方法(通常命名为getInstance), 从而返回唯一实例的一个引用.

代码实现:
```
<?php
class singleton {
    // 私有静态成员变量
    private static $_instance = null;

    // 私有构造函数，只在第一次实例化时执行
    private function __construct() {}

    // 私有克隆函数
    private function __clone() {}

    // 获取实例函数
    public static function getInstance() {
        if (self::$_instance === null) {
            self::$_instance = new self();
        }
        return self::$_instance;
    }
}
```

通过以下代码验证是否为同一实例:
```
$a = singleton::getInstance();
$b = singleton::getInstance();
var_dump($a === $b);
```
输出结果:
```
cdyf@jumei:~/tutorial/DesignMode$ php Singleton.php
bool(true)
```
可见$a和$b是同一实例.

### 应用单例模式的数据库连接类
单例模式的一个常见的应用是在数据库连接中.

* 未使用单例模式
```
<?php
......
// 初始化一个数据库句柄
$db = mysql_connect(...);

// 添加用户信息
$db->addUserInfo(...);

......

// 在函数中访问数据库，查找用户信息
function getUserInfo()
{
    $db = mysql_connect(...); // 再次new 数据库类，和数据库建立连接
    $db = query(....); // 根据查询语句访问数据库
}
?>
```

多次连接数据库,浪费资源.

* 使用单例模式
```
<?php

class DB {
    // 增加一个成员变量存放数据库连接句柄
    private $_db;
    private static $_instance;

    // 在构造函数中执行数据库连接，给$_db赋值
    private function __construct(...) {
        $this->_db = mysql_connect(...);
    }

    private function __clone() {};  //覆盖__clone()方法，禁止克隆

    public static function getInstance()  {
        if(! (self::$_instance instanceof self) ) {
            self::$_instance = new self();
        }
        return self::$_instance;
    }

    public function doSometing($sql) {
          $res = mysql_query($sql,$this->_db);
        return $res;
    }
}

$db = DB::getInstance();

$db->doSomething("SELECT * FROM user");
?>
```
通过单例模式保证了只有一次连接数据库的操作.

### 深入理解


























